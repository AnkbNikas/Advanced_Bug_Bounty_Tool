import requests
import threading
import socket
import subprocess
import tkinter as tk
from tkinter import messagebox
import webbrowser

session = requests.Session()
session.headers.update({"User-Agent": "BugBountyTool/Pro"})
results = []
lock = threading.Lock()

SECURITYTRAILS_API_KEY = "YOUR_API_KEY_HERE"

def scan_sql_injection(url):
    try:
        command = ["sqlmap", "-u", url, "--batch", "--crawl=2"]
        result = subprocess.run(command, capture_output=True, text=True)
        if "sqlmap identified the following injection point" in result.stdout:
            with lock:
                results.append(f"[!] SQL Injection found at: {url}\n{result.stdout}")
    except Exception as e:
        print(f"[-] SQL Injection scan error: {e}")

def scan_xss(url):
    try:
        test_payload = "<script>alert('XSS')</script>"
        response = session.get(url, params={"q": test_payload})
        if test_payload in response.text:
            with lock:
                results.append(f"[!] Possible XSS found at: {url}")
    except Exception as e:
        print(f"[-] XSS scan error: {e}")

def scan_directories(url):
    common_dirs = ["admin", "login", "config", "backup", "wp-admin", "phpmyadmin"]
    for dir in common_dirs:
        try:
            response = session.get(f"{url}/{dir}", timeout=5)
            if response.status_code == 200:
                with lock:
                    results.append(f"[+] Exposed directory found: {url}/{dir}")
        except Exception as e:
            print(f"[-] Directory scan error: {e}")

def get_subdomains_from_api(domain):
    try:
        url = f"https://api.securitytrails.com/v1/domain/{domain}/subdomains"
        headers = {"APIKEY": SECURITYTRAILS_API_KEY}
        response = session.get(url, headers=headers)
        if response.status_code == 200:
            subdomains = response.json().get("subdomains", [])
            return [f"{sub}.{domain}" for sub in subdomains]
        else:
            print(f"[-] Error fetching subdomains: {response.text}")
    except Exception as e:
        print(f"[-] SecurityTrails API error: {e}")
    return []

def scan_subdomains(domain):
    subdomains = get_subdomains_from_api(domain)
    for sub in subdomains:
        try:
            response = session.get(f"http://{sub}", timeout=5)
            if response.status_code == 200:
                with lock:
                    results.append(f"[+] Subdomain found: http://{sub}")
        except:
            continue

def run_nmap(domain, ports):
    try:
        command = ["nmap", "-p", ",".join(map(str, ports)), "-sV", domain]
        result = subprocess.run(command, capture_output=True, text=True)
        with lock:
            results.append(f"[+] Nmap results:\n{result.stdout}")
    except Exception as e:
        print(f"[-] Nmap scan error: {e}")

def run_nikto(url):
    try:
        command = ["nikto", "-h", url]
        result = subprocess.run(command, capture_output=True, text=True)
        with lock:
            results.append(f"[+] Nikto results:\n{result.stdout}")
    except Exception as e:
        print(f"[-] Nikto scan error: {e}")

def run_wpscan(url):
    try:
        command = ["wpscan", "--url", url, "--enumerate", "vp", "--plugins-detection", "mixed"]
        result = subprocess.run(command, capture_output=True, text=True)
        if "Vulnerability" in result.stdout:
            with lock:
                results.append(f"[!] WordPress vulnerabilities found at: {url}\n{result.stdout}")
    except Exception as e:
        print(f"[-] WPScan error: {e}")

def generate_html_report(filename="report.html"):
    html_content = """
    <html>
    <head><title>Bug Bounty Report</title></head>
    <body>
    <h1>Bug Bounty Report</h1>
    <ul>
    """
    for result in results:
        html_content += f"<li>{result}</li>"
    html_content += "</ul></body></html>"

    with open(filename, "w") as f:
        f.write(html_content)
    print(f"[*] Report generated at {filename}")
    webbrowser.open(filename)

def start_scan():
    global results
    results = []
    url = entry_url.get()
    domain = entry_domain.get()
    ports = list(map(int, entry_ports.get().split(",")))

    threads = []

    if url:
        threads.append(threading.Thread(target=scan_sql_injection, args=(url,)))
        threads.append(threading.Thread(target=scan_xss, args=(url,)))
        threads.append(threading.Thread(target=scan_directories, args=(url,)))
        threads.append(threading.Thread(target=run_nikto, args=(url,)))
        threads.append(threading.Thread(target=run_wpscan, args=(url,)))

    if domain:
        threads.append(threading.Thread(target=scan_subdomains, args=(domain,)))
        threads.append(threading.Thread(target=run_nmap, args=(domain, ports)))

    for thread in threads:
        thread.start()

    for thread in threads:
        thread.join()

    generate_html_report()
    messagebox.showinfo("Scan Complete", "The scan has finished. Check the report.")

root = tk.Tk()
root.title("Bug Bounty Tool - Pentester Edition")

tk.Label(root, text="URL:").grid(row=0, column=0)
entry_url = tk.Entry(root, width=50)
entry_url.grid(row=0, column=1)

tk.Label(root, text="Domain:").grid(row=1, column=0)
entry_domain = tk.Entry(root, width=50)
entry_domain.grid(row=1, column=1)

tk.Label(root, text="Ports (comma-separated):").grid(row=2, column=0)
entry_ports = tk.Entry(root, width=50)
entry_ports.insert(0, "80,443,8080,22,21")
entry_ports.grid(row=2, column=1)

tk.Button(root, text="Start Scan", command=start_scan).grid(row=3, column=0, columnspan=2)

root.mainloop()
